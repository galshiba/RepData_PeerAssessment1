q()
q()
q()
library("KernSmooth", lib.loc="~/R/win-library/3.4")
install.packages(slidify)
a <- available.packages()
head(rownames(a),3)
rm(a)
install.packages(slidify)
search()
q()
plot(cars)
q()
q()
q()
q()
q()
q()
q()
library(devtools)
find_rtools()
find_rtools
find_rtools()
q()
library(devtools)
find_rtools()
q()
q()
install.packages("RMySQL")
q()
install.packages("RTools")
q()
library(devtools)
find_rtools()
q()
q()
library(devtools)
find_rtools()
q()
library(devtools)
find_rtools()
q()
q()
install.packages("RMySQL")
q()
library(RMySQL)
ucscdb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscdb,"show.databases;"); dbDisconnect(ucscdb)
result <- dbGetQuery(ucscdb,"show.databases;")
dbGetQuery
?dbGetQuery
result
ucscdb
result <- dbGetQuery(ucscdb,"showDatabases;")
dbDisconnect(ucscdb)
rm(ucscdb)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse-ucsc.edu")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse-ucsc.edu")
q()
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show.databases;");dbDisconnect(ucscDb)
result <- dbGetQuery(ucscDb,"show.databases");dbDisconnect(ucscDb)
library(RMySQL)
require(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb)
head(result)
q()
library(RMySQL)
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19,"affyU133Plus2")
warnings()
head(affyData)
query <- dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
warnings()
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query,n=10); dbClearResult(query)
dim(affyMisSmall)
dbDisconnect(hg19)
rm(allTables)
q()
rm(list=all)
library(swirl)
rm(list=ls())
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created <- h5createfile("example.h5")
getwd()
q()
rm(list=ls())
q()
search()
library(httpuv)
oauth_endpoints("github")
search()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "5587cd70ad5dee4adb7b",
secret = "ea541019a933fe19af81f71b96fba7668463aa73")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
rm(list=ls())
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "5587cd70ad5dee4adb7b",
secret = "ea541019a933fe19af81f71b96fba7668463aa73")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
rm(list=ls())
myapp <- oauth_app("github",
key = "5587cd70ad5dee4adb7b",
secret = "ea541019a933fe19af81f71b96fba7668463aa73")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos",gtoken)
stop_for_status(req)
content(req)
req$datasharing
contents(req)
content(req)
class(req)
json1 <- content(req)
json2 <- jsonlite::fromJSON(toJSON(json1))
?jsonlite
toJSON
fromJSON
json2 = jsonlite::fromJSON(toJSON(json1))
jsonlite
rm(json1)
req
content(req)
json1 <- content(req)
class(json1)
json1$permission
length(json1)
json1[30]
names(json1)
name(json1)
labels(json1)
json1[1]
json1$name
json1[1]$name
json1[1][1]
json1[[1]]$name
json1[[2]]$name
json1[[3]]$name
json1[[4]]$name
json1[[5]]$name
json1[[30]]$name
json1[[15]]$name
json1[[13]]$name
json1[[12]]$name
json1[[12]]$created
ls()
library(sqldf)
install.packages(sqldf)
?sqldf
??sqldf
library(RMySQL)
acs
sqldf
library(sqldf)
library(sqldf)
install.packages(sqldf)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
library(sqldf)
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
dim(acs)
class(acs)
names(acs)
test1 <- unique(acs$AGEP)
test1
test2 <- sqldf("select unique AGEP from acs")
test2 <- sqldf("select distinct AGEP from acs")
test2 <- sqldf("select AGEP where unique from acs")
sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
acs
search()
detach(RMySQL)'
)
))
detach(RMySQL)
remove(RMySQL)
search()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
detach_package(RMySQL)
?detach_package
detach_packagre
unloadNamespace
unloadNamespace(RMySQL)
unloadNamespace("RMySQL")
search()
library(MySQL)
install.packages("MySQL")
search()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
sqldf("select pwgtp1 from acs where AGEP < 50")
test1
test2 <- sqldf("select unique AGEP from acs")
test2 <- sqldf("select distinct AGEP from acs")
test2
class(test2)
class(test1)
test2 <- sqldf("select AGEP where unique from acs")
test2 <- sqldf("select distinct pwgtp1 from acs")
test2
test1
test2 <- sqldf("select distinct AGEP from acs")
test2
test1
library(XML)
url2 <- "http://biostat.jhsph.edu/~jleek/contact.html"
html <- htmlTreeParse(url2, useInternalNodes=T)
xpathSApply(html, "//title",xmlValue)
html2 <- GET(url2)
names(html2)
ls()
rm(html,html2,url2)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(con)
close(con)
nchar(htmlCode)
dim(htmlCode)
class(htmlCode)
length(htmlCode)
ls()
url2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url2,n=10)
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
?read.fwf
d <- read.fwf(url2, w, header=FALSE, skip=4, col.names=colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
lines
d
?grep
d2 <- read.fwf(url2, w, header=FALSE, skip=4, col.names=colNames)
d2
ls()
q()
rm(list=ls())
q()
q()
q()
setwd("C:/Users/Aaron/RepData_PeerAssessment1")
load(".RData")
?impute
??impute
library(Hmisc)
?impute
library(ggplot2)
library(scales)
library(Hmisc)
if(!file.exists("activity.csv")) {
unzip("activity.zip")
}
activity <- read.csv("activity.csv")
activity$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activity$interval), format="%H%M")
stepsPerDay <- tapply(activity$steps, activity$date, sum, na.rm=TRUE)
qplot(stepsPerDay, xlab="Total steps per day", ylab="Frequency", binwidth=500)
stepsPerDayMean <- mean(stepsPerDay)
stepsPerDayMedian <- median (stepsPerDay)
averageStepPerTime <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval),
FUN=mean, na.rm=TRUE)
```{r}
library(ggplot2)
library(scales)
library(Hmisc)
if(!file.exists("activity.csv")) {
unzip("activity.zip")
}
activity <- read.csv("activity.csv")
activity$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activity$interval), format="%H%M")
stepsPerDay <- tapply(activity$steps, activity$date, sum, na.rm=TRUE)
qplot(stepsPerDay, xlab="Total steps per day", ylab="Frequency", binwidth=500)
stepsPerDayMean <- mean(stepsPerDay)
stepsPerDayMedian <- median (stepsPerDay)
averageStepPerTime <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval),
FUN=mean, na.rm=TRUE)
library(ggplot2)
library(scales)
library(Hmisc)
if(!file.exists("activity.csv")) {
unzip("activity.zip")
}
activity <- read.csv("activity.csv")
activity$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activity$interval), format="%H%M")
stepsPerDay <- tapply(activity$steps, activity$date, sum, na.rm=TRUE)
qplot(stepsPerDay, xlab="Total steps per day", ylab="Frequency", binwidth=500)
stepsPerDayMean <- mean(stepsPerDay)
stepsPerDayMedian <- median (stepsPerDay)
averageStepPerTime <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval), FUN=mean, na.rm=TRUE)
?aggregate
library(ggplot2)
library(scales)
library(Hmisc)
if(!file.exists("activity.csv")) {
unzip("activity.zip")
}
activity <- read.csv("activity.csv")
activity$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activity$interval), format="%H%M")
stepsPerDay <- tapply(activity$steps, activity$date, sum, na.rm=TRUE)
qplot(stepsPerDay, xlab="Total steps per day", ylab="Frequency", binwidth=500)
stepsPerDayMean <- mean(stepsPerDay)
stepsPerDayMedian <- median (stepsPerDay)
averageStepPerTime <- aggregate(x=list(steps=activity$steps), by=list(activity$interval), FUN=mean, na.rm=TRUE)
averageStepPerTime <- aggregate(x=list(steps=activity$steps), by=list(activity$interval), FUN=mean, na.rm=TRUE)
averageStepPerTime <- aggregate(x=list(steps=activity$steps), by=list(interal=activity$interval), FUN=mean, na.rm=TRUE)
activity$interval
summary(activity$interval)
activity <- read.csv("activity.csv")
head(activity)
interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activity$interval), format="%H%M")
head(interval)
class(activity$interval)
interval <- gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activity$interval), format="%H%M")
interval <- gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activity$interval)
class(interval)
head(interval)
interval2 <- strptime(interval2,format='%H%M')
interval2 <- strptime(interval,format='%H%M')
head(interval2)
library(ggplot2)
library(scales)
library(Hmisc)
if(!file.exists("activity.csv")) {
unzip("activity.zip")
}
activity <- read.csv("activity.csv")
activity$interval <- gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activity$interval)
stepsPerDay <- tapply(activity$steps, activity$date, sum, na.rm=TRUE)
qplot(stepsPerDay, xlab="Total steps per day", ylab="Frequency", binwidth=500)
stepsPerDayMean <- mean(stepsPerDay)
stepsPerDayMedian <- median (stepsPerDay)
averageStepPerTime <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval), FUN=mean, na.rm=TRUE)
ggplot(data=averageStepPerTime, aes(x=interval,y=steps)) +
geom_line() +
labs(x="5-minute interval", y="average number of steps taken")
mostSteps <- which.max(averageStepPerTime$steps)
timeMostSteps <- gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageStepPerTime[mostSteps, 'interval'])
nMissingVAlues <- length(which(is.na(activity$steps)))
activityImputed <- activity
activityImputed$steps <- impute(activity$steps, fun=mean)
stepsPerDayImputed <- tapply(activityImputed$steps, activityImputed$date,sum)
qplot(stepsPerDayImputed, xlab="Total steps per day (imputed)",ylab="Frequency",binwidth=500)
stepsPerDayMeanImputed <- mean(stepsPerDayImputed)
stepsPerDayMedianImputed <- median(stepsPerDayImputed)
activityImputed$datetype <- ifelse(as.POSIXlt(activityImputed$date)$wday %in% c(0,6), 'weekday','weekend')
averageActivityImputed <- aggregate(steps ~ interval + datetype, data=activityImputed, mean)
ggplot(averageActivityImputed, aes(interval, steps)) +
geom_line() +
facet_grid(datetype ~.) +
labs(x="5-minute interval",y="average number of steps")
rm(list=ls())
